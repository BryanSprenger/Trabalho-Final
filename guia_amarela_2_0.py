import streamlit as st
from streamlit_folium import st_folium
import folium
import geopandas as gpd
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# Carregamento dos dados
url_lotes = "https://raw.githubusercontent.com/BryanSprenger/Trabalho-Final/main/Lotes2021_4.geojson"

# --- Configura√ß√£o da P√°gina Streamlit ---
st.set_page_config(page_title="Guia Amarela Interativa", page_icon=":scroll:", layout="wide")

st.title("Guia Amarela Interativa")
st.markdown("Selecione um lote no mapa ou filtre pela inscri√ß√£o fiscal para visualizar os dados urban√≠sticos.")

# Menu lateral
st.sidebar.title("Navega√ß√£o")
pagina = st.sidebar.radio(
    "Selecione uma se√ß√£o:",
    ("üè† Home", "üèóÔ∏è Potencial Construtivo", "üìê √Årea de Ocupa√ß√£o", "üìä Indicadores Urban√≠sticos", "üó∫Ô∏è Mapa Interativo")
)

# ------------------------------------------------------------------------------ HOME -----------------------------------------------------------------------------------------------

if pagina == "üè† Home":
    st.title("Guia Amarela Interativa")
    st.markdown("""
    Esta aplica√ß√£o visa apresentar as informa√ß√µes da Consulta Informativa de Lote (CIL), tamb√©m conhecida como Guia Amarela, de forma interativa, visual e acess√≠vel.

    **Funcionalidades principais:**
    - Visualiza√ß√£o de par√¢metros urban√≠sticos de forma gr√°fica
    - Mapa interativo do lote
    - Simula√ß√£o de potencial construtivo em 3D
    - Explica√ß√µes sobre zoneamento, coeficiente de aproveitamento, recuos, etc.
    """)

# ---------------------------------------------------------------------------- POTENCIAL CONSTRUTIVO ------------------------------------------------------------------------------------

elif pagina == "üèóÔ∏è Potencial Construtivo":
    st.title("Potencial Construtivo")

    st.markdown("Visualize aqui o volume m√°ximo permitidos pelo coeficiente de aproveitamento, altura e recuos m√≠nimos.")

    # Carrega o arquivo GeoJSON localmente
    gdf = gpd.read_file(url_lotes)

    # Caixa de entrada para Indica√ß√£o Fiscal
    ind_fiscal = st.text_input("Digite a Indica√ß√£o Fiscal (INDFISCAL):")

    # Verifica se foi digitado algo
    if ind_fiscal:
        lote_filtrado = gdf[gdf["INDFISCAL"] == ind_fiscal]

        if lote_filtrado.empty:
            st.warning("Nenhum lote encontrado com essa indica√ß√£o fiscal.")
        else:
            lote_geom = lote_filtrado.geometry.values[0]

            # Garantir que seja um Polygon simples
            if lote_geom.is_empty:
                st.error("A geometria do lote est√° vazia.")
            elif lote_geom.geom_type == "MultiPolygon":
                # Pega o maior pol√≠gono do MultiPolygon
                lote_geom = max(lote_geom.geoms, key=lambda a: a.area)

            if lote_geom.geom_type == "Polygon":
                try:
                    x, y = list(lote_geom.exterior.coords.xy[0]), list(lote_geom.exterior.coords.xy[1])
                    area = lote_geom.area
                    ca = st.slider("Coeficiente de Aproveitamento (CA)", 0.5, 4.0, 2.0, 0.1)
                    altura = (ca * area) / (area**0.5)
                    z_base = [0] * len(x)
                    z_top = [altura] * len(x)

                    fig = go.Figure()

                    # base
                    fig.add_trace(go.Scatter3d(x=x, y=y, z=z_base, mode='lines',
                                               line=dict(color='blue', width=4), name='Base'))

                    # topo
                    fig.add_trace(go.Scatter3d(x=x, y=y, z=z_top, mode='lines',
                                               line=dict(color='lightblue', width=4), name='Topo'))

                    # laterais
                    for i in range(len(x)):
                        fig.add_trace(go.Scatter3d(
                            x=[x[i], x[i]], y=[y[i], y[i]], z=[0, altura],
                            mode='lines', line=dict(color='lightblue', width=2), showlegend=False
                        ))

                    fig.update_layout(
                        scene=dict(xaxis_title='X', yaxis_title='Y', zaxis_title='Altura (m)'),
                        margin=dict(l=0, r=0, b=0, t=30)
                    )

                    st.plotly_chart(fig, use_container_width=True)

                except Exception as e:
                    st.error(f"Erro ao gerar visualiza√ß√£o 3D: {e}")
            else:
                st.error("A geometria selecionada n√£o √© um pol√≠gono v√°lido.")
    else:
        st.info("Insira a Indica√ß√£o Fiscal para visualizar o lote.")
   
# --------------------------------------------------------------------- INDICADORES -------------------------------------------------------------

elif pagina == "üìä Indicadores Urban√≠sticos":
    st.title("Indicadores Urban√≠sticos")
    st.markdown("Apresenta valores de altura m√°xima, CA, recuos e outros par√¢metros em formato de tabela ou gr√°fico.")

    # Exemplo fict√≠cio
    dados = {
        "Par√¢metro": ["Altura M√°xima", "CA", "Taxa de Ocupa√ß√£o", "Permeabilidade"],
        "Valor": ["12m", "1.5", "60%", "25%"],
        "Descri√ß√£o": ["Limite de altura", "Coeficiente de aproveitamento", "Porcentagem m√°xima constru√≠da", "√Årea m√≠nima perme√°vel"]
    }
    import pandas as pd
    df = pd.DataFrame(dados)
    st.table(df)

# ---------------------------------------------------------------- MAPA INTERATIVO ----------------------------------------------------------------------------

elif pagina == "üó∫Ô∏è Mapa Interativo":
    st.title("Mapa Interativo")

        # Carrega o GeoDataFrame
    gdf = gpd.read_file(url_lotes)
    gdf = gdf[gdf.is_valid & ~gdf.geometry.is_empty]

    # --- Cria√ß√£o do Mapa Base Folium ---
    m = folium.Map(location=[-25.46, -49.27], zoom_start=12, tiles="CartoDB positron")

    # Adiciona a camada GeoJSON
    campos_seguro = ["CDLOTE", "INDFISCAL", "CDVIA", "NMVIA"]  # substitua por campos que existam de verdade

    folium.GeoJson(
        gdf,
        name="Lotes",
        tooltip=folium.GeoJsonTooltip(
            fields=campos_seguro,
            aliases=["C√≥digo da Via", "Indica√ß√£o Fiscal", "C√≥digo da Via", "Nome da Via"],
            sticky=True
        )
    ).add_to(m)

    folium.LayerControl().add_to(m)

    # --- Renderiza√ß√£o do Mapa no Streamlit ---
    st_data = st_folium(m, width="100%", height=700)
